lm3b <- lm(d1$Time ~ d1$Country)
lm3b %>% tidy(conf.int=TRUE) %>% format_model_table %>% kable(digits=2)
blm3b <- stan_glm(d1$Time ~ d1$Country,prior=normal(0,100),prior_intercept = normal(0,100),refresh=-1)
kable(tidyMCMC(blm3b,conf.int=TRUE),digits=3)
lmBF(Time ~ Country,data=d1)
set.seed(1234)
d1$Country <- relevel(d1$Country,ref="KEN")
d1$bigfactor <-d1$Country:d1$Sex
contrasts(d1$bigfactor) <- contr.treatment(6,base=4)
contrasts(d1$bigfactor)
lm5 <- lm(d1$Time ~ d1$bigfactor)
lm5 %>% tidy(conf.int=TRUE) %>% format_model_table %>% kable(digits=2)
lmBF(Time~bigfactor,data=d1)
blm5 <- stan_glm(Time~bigfactor,data=d1,prior = normal(0,100),prior_intercept = normal(0,100),refresh=-1)
kable(tidyMCMC(blm5,conf.int=TRUE),digits=3)
set.seed(1234)
lm1 <- lm(d1$Time ~ d1$Sex)
lm1 %>% tidy(conf.int=TRUE) %>% format_model_table %>% kable(digits=2)
lmBF(Time ~ Sex,data=d1)
lm2a <- lm(d1$Time ~ d1$Country)
lm2a %>% tidy(conf.int=TRUE) %>% format_model_table %>% kable(digits=2)
lm2a <- lm(d1$Time ~ d1$Country)
lm2a %>% tidy(conf.int=TRUE) %>% format_model_table %>% kable(digits=2)
d1$Country <- relevel(d1$Country,ref="USA")
lm2b <- lm(d1$Time ~ d1$Country)
lm2b %>% tidy(conf.int=TRUE) %>% format_model_table %>% kable(digits=2)
lm3a <- lm(d1$Time ~ d1$Country)
lm3a %>% tidy(conf.int=TRUE) %>% format_model_table %>% kable(digits=2)
system("echo $PATH")
set.seed(1234)
d1$Country <- relevel(d1$Country,ref="KEN")
d1$bigfactor <-d1$Country:d1$Sex
contrasts(d1$bigfactor) <- contr.treatment(6,base=4)
contrasts(d1$bigfactor)
lm5 <- lm(d1$Time ~ d1$bigfactor)
lm5 %>% tidy(conf.int=TRUE) %>% format_model_table %>% kable(digits=2)
lmBF(Time~bigfactor,data=d1)
blm5 <- stan_glm(Time~bigfactor,data=d1,prior = normal(0,100),prior_intercept = normal(0,100),refresh=-1)
kable(tidyMCMC(blm5,conf.int=TRUE),digits=3)
set.seed(1234)
library(car)
library(foreign)
library(rstanarm)
library(BayesFactor)
library(knitr)
library(broom)
library(magrittr)
library(dplyr)
fixed_digits <- function(xs, n = 2) {
formatC(xs, digits = n, format = "f")
}
format_pval <- function(ps, html = FALSE) {
tiny <- ifelse(html, "&lt;&nbsp;.001", "< .001")
ps_chr <- ps %>% fixed_digits(3)
ps_chr[ps < 0.001] <- tiny
ps_chr
}
format_model_table <- . %>%
mutate(p.value = format_pval(p.value))
d1 <- read.spss("https://github.com/felixthoemmes/hwdatasets/blob/master/hw4_marathon_2014.sav?raw=true",
to.data.frame = TRUE)
#making factors out of variables
d1$Sex <- factor(d1$Sex)
d1$Country <- factor(d1$Country)
d1$newfac <- d1$Country:d1$Sex
#checking levels and underlying contrasts
levels(d1$Country)
contrasts(d1$Country)
#descriptives - here using psych package
library(psych)
describe(d1$Time,skew = FALSE)
describe(d1$Time[d1$Sex=="F"],skew=FALSE)
describe(d1$Time[d1$Sex=="M"],skew=FALSE)
describe(d1$Time[d1$Country=="ETH"],skew=FALSE)
describe(d1$Time[d1$Country=="KEN"],skew=FALSE)
describe(d1$Time[d1$Country=="USA"],skew=FALSE)
set.seed(1234)
d1$Country <- relevel(d1$Country,ref="KEN")
d1$bigfactor <-d1$Country:d1$Sex
contrasts(d1$bigfactor) <- contr.treatment(6,base=4)
contrasts(d1$bigfactor)
lm5 <- lm(d1$Time ~ d1$bigfactor)
lm5 %>% tidy(conf.int=TRUE) %>% format_model_table %>% kable(digits=2)
lmBF(Time~bigfactor,data=d1)
blm5 <- stan_glm(Time~bigfactor,data=d1,prior = normal(0,100),prior_intercept = normal(0,100),refresh=-1)
kable(tidyMCMC(blm5,conf.int=TRUE),digits=3)
lmBF(Time~bigfactor,data=d1)
setwd("~/Documents/GitHub/echem")
setwd("echem_Fall_2017/")
library(foreign)
library(psych)
library(foreign)
cleanFile<- function(filename){
steps <- matrix(data = NA, nrow =6, ncol=7)
colnames(steps) <- c('name','AA','choline1','choline2','choline3','H2O2','slope')
data1 <-read.csv(filename, col.names = c("marker","sent1","enz1","sent2","enz2"))
data1 <- na.omit(data1)
data1<-data.frame(data1)
data1<-data1[-c(1:6),] #remove the first 6 rows, which are garbage
# data1[,2:5]<-data1[,2:5]*-1
# data1[,2:5]<-data1[,2:5]*1000
AAin <- which(data1$marker=="1")
Ch1in <- which(data1$marker=="2")
Ch2in <- which(data1$marker=="3")
Ch3in <- which(data1$marker=="4")
H2O2in <- which(data1$marker=="5")
H2O2done <- which(data1$marker=="6")
#   for(x in 2:5){
#     bsln <- median(data1[1:AAin,x])
#     data1[,x]<-data1[,x]-bsln
#   }
data1$electrode1 <- data1$enz1-data1$sent1
data1$electrode2 <- data1$enz2-data1$sent2
z=1
for(y in 2:7) {
#creates matrix with steps for each channel
name <- colnames(data1)[y]
AA <- data1[Ch1in,y]-data1[AAin,y]
Ch1 <- data1[Ch2in,y]-data1[Ch1in,y]
Ch2 <- data1[Ch3in,y]-data1[Ch2in,y]
Ch3 <- data1[H2O2in,y]-data1[Ch3in,y]
H2O2 <- data1[H2O2done,y]-data1[H2O2in,y]
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-c(data1[Ch1in,y],data1[Ch2in,y],data1[Ch3in,y],data1[H2O2in,y])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
steps[z,]<-c(name,AA,Ch1,Ch2,Ch3,H2O2,slope1)
#plots each channel
plot(data1[,y], type = "l", main = name)
z=z+1}
steps<-data.frame(steps)
return(steps)
}
mySlope = function(dataframe, column){
data1<- dataframe
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-x#c(data1[Ch1in,column],data1[Ch2in,column],data1[Ch3in,column],data1[H2O2in,column])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
return(slope1)}
library(foreign)
library(psych)
library(foreign)
cleanFile<- function(filename){
steps <- matrix(data = NA, nrow =6, ncol=7)
colnames(steps) <- c('name','AA','choline1','choline2','choline3','H2O2','slope')
data1 <-read.csv(filename, col.names = c("marker","sent1","enz1","sent2","enz2"))
data1 <- na.omit(data1)
data1<-data.frame(data1)
data1<-data1[-c(1:6),] #remove the first 6 rows, which are garbage
# data1[,2:5]<-data1[,2:5]*-1
# data1[,2:5]<-data1[,2:5]*1000
AAin <- which(data1$marker=="1")
Ch1in <- which(data1$marker=="2")
Ch2in <- which(data1$marker=="3")
Ch3in <- which(data1$marker=="4")
H2O2in <- which(data1$marker=="5")
H2O2done <- which(data1$marker=="6")
for(x in 2:5){
H2O2 <- data1[H2O2done,x]-data1[H2O2in,x]
data1[,x]<-data1[,x]/H2O2
}
data1$electrode1 <- data1$enz1-data1$sent1
data1$electrode2 <- data1$enz2-data1$sent2
z=1
for(y in 2:7) {
#creates matrix with steps for each channel
name <- colnames(data1)[y]
AA <- data1[Ch1in,y]-data1[AAin,y]
Ch1 <- data1[Ch2in,y]-data1[Ch1in,y]
Ch2 <- data1[Ch3in,y]-data1[Ch2in,y]
Ch3 <- data1[H2O2in,y]-data1[Ch3in,y]
H2O2 <- data1[H2O2done,y]-data1[H2O2in,y]
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-c(data1[Ch1in,y],data1[Ch2in,y],data1[Ch3in,y],data1[H2O2in,y])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
steps[z,]<-c(name,AA,Ch1,Ch2,Ch3,H2O2,slope1)
#plots each channel
plot(data1[,y], type = "l", main = name)
z=z+1}
steps<-data.frame(steps)
return(steps)
}
mySlope = function(dataframe, column){
data1<- dataframe
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-x#c(data1[Ch1in,column],data1[Ch2in,column],data1[Ch3in,column],data1[H2O2in,column])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
return(slope1)}
getwd()
ls
MEA1_24hour <- cleanFile("1N5E_sept_1st.csv")
View(MEA1_24hour)
MEA2_24hour <- cleanFile("1N5E_sept_1st_B.csv")
MEA1_48hour <- cleanFile("1N5E_sept_2nd_A.csv")
MEA2_48hour <- cleanFile("1N5E_sept_2nd_B.csv")
MEA2_48hour <- cleanFile("1N5E_sept2_B.csv")
MEA2_24hour <- cleanFile("1N5E_sept_1st_B.csv")
MEA2_48hour <- cleanFile("1N5E_sept2_B.csv")
View(MEA1_24hour)
View(MEA1_48hour)
plot(MEA1_24hour$AA~MEA1_48hour$AA)
plot(MEA1_24hour$AA~MEA1_48hour$AA, type="l")
?rowMeans
steps[3:5,]
MEA1_24hour[3:5,]
MEA1_24hour[,3:5]
rowMeans(MEA1_24hour[,3:5])
MEA1_24hour$selectivity <- (MEA1_24hour$slope * 125)/MEA1_24hour$AA
MEA1_24hour$AA <- as.numeric(MEA1_24hour$AA)
MEA1_24hour$choline1 <- as.numeric(MEA1_24hour$choline1)
MEA1_24hour$choline2 <- as.numeric(MEA1_24hour$choline2)
MEA1_24hour$choline3 <- as.numeric(MEA1_24hour$choline3)
library(foreign)
library(psych)
library(foreign)
cleanFile<- function(filename){
steps <- matrix(data = NA, nrow =6, ncol=7)
colnames(steps) <- c('name','AA','choline1','choline2','choline3','H2O2','slope')
data1 <-read.csv(filename, col.names = c("marker","sent1","enz1","sent2","enz2"))
data1 <- na.omit(data1)
data1<-data.frame(data1)
data1<-data1[-c(1:6),] #remove the first 6 rows, which are garbage
# data1[,2:5]<-data1[,2:5]*-1
# data1[,2:5]<-data1[,2:5]*1000
AAin <- which(data1$marker=="1")
Ch1in <- which(data1$marker=="2")
Ch2in <- which(data1$marker=="3")
Ch3in <- which(data1$marker=="4")
H2O2in <- which(data1$marker=="5")
H2O2done <- which(data1$marker=="6")
#   for(x in 2:5){
#     bsln <- median(data1[1:AAin,x])
#     data1[,x]<-data1[,x]-bsln
#   }
data1$electrode1 <- data1$enz1-data1$sent1
data1$electrode2 <- data1$enz2-data1$sent2
z=1
for(y in 2:7) {
#creates matrix with steps for each channel
name <- colnames(data1)[y]
AA <- data1[Ch1in,y]-data1[AAin,y]
Ch1 <- data1[Ch2in,y]-data1[Ch1in,y]
Ch2 <- data1[Ch3in,y]-data1[Ch2in,y]
Ch3 <- data1[H2O2in,y]-data1[Ch3in,y]
H2O2 <- data1[H2O2done,y]-data1[H2O2in,y]
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-c(data1[Ch1in,y],data1[Ch2in,y],data1[Ch3in,y],data1[H2O2in,y])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
steps[z,]<-c(name,AA,Ch1,Ch2,Ch3,H2O2,slope1)
#plots each channel
plot(data1[,y], type = "l", main = name)
z=z+1}
steps<-data.frame(steps)
steps$selectivity <- (125 * steps$slope)/steps$AA
steps$AA <-  as.character(steps$AA)
steps$AA <- as.numeric(steps$AA)
steps$Ch1 <-  as.character(steps$Ch1)
steps$Ch1 <- as.numeric(steps$Ch1)
steps$Ch2 <-  as.character(steps$Ch2)
steps$Ch2 <- as.numeric(steps$Ch2)
steps$Ch3 <-  as.character(steps$Ch3)
steps$Ch3 <- as.numeric(steps$Ch3)
steps$H2O2 <-  as.character(steps$H2O2)
steps$H2O2 <- as.numeric(steps$H2O2)
steps$slope <- as.character(steps$slope)
steps$slope <- as.numeric(steps$slope)
return(steps)
}
mySlope = function(dataframe, column){
data1<- dataframe
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-x#c(data1[Ch1in,column],data1[Ch2in,column],data1[Ch3in,column],data1[H2O2in,column])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
return(slope1)}
MEA1_24hour$choline3 <- as.numeric(MEA1_24hour$choline3)
library(foreign)
library(psych)
library(foreign)
cleanFile<- function(filename){
steps <- matrix(data = NA, nrow =6, ncol=7)
colnames(steps) <- c('name','AA','choline1','choline2','choline3','H2O2','slope')
data1 <-read.csv(filename, col.names = c("marker","sent1","enz1","sent2","enz2"))
data1 <- na.omit(data1)
data1<-data.frame(data1)
data1<-data1[-c(1:6),] #remove the first 6 rows, which are garbage
# data1[,2:5]<-data1[,2:5]*-1
# data1[,2:5]<-data1[,2:5]*1000
AAin <- which(data1$marker=="1")
Ch1in <- which(data1$marker=="2")
Ch2in <- which(data1$marker=="3")
Ch3in <- which(data1$marker=="4")
H2O2in <- which(data1$marker=="5")
H2O2done <- which(data1$marker=="6")
#   for(x in 2:5){
#     bsln <- median(data1[1:AAin,x])
#     data1[,x]<-data1[,x]-bsln
#   }
data1$electrode1 <- data1$enz1-data1$sent1
data1$electrode2 <- data1$enz2-data1$sent2
z=1
for(y in 2:7) {
#creates matrix with steps for each channel
name <- colnames(data1)[y]
AA <- data1[Ch1in,y]-data1[AAin,y]
Ch1 <- data1[Ch2in,y]-data1[Ch1in,y]
Ch2 <- data1[Ch3in,y]-data1[Ch2in,y]
Ch3 <- data1[H2O2in,y]-data1[Ch3in,y]
H2O2 <- data1[H2O2done,y]-data1[H2O2in,y]
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-c(data1[Ch1in,y],data1[Ch2in,y],data1[Ch3in,y],data1[H2O2in,y])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
steps[z,]<-c(name,AA,Ch1,Ch2,Ch3,H2O2,slope1)
#plots each channel
plot(data1[,y], type = "l", main = name)
z=z+1}
steps<-data.frame(steps)
steps$selectivity <- (125 * steps$slope)/steps$AA
steps$AA <-  as.character(steps$AA)
steps$AA <- as.numeric(steps$AA)
steps$Ch1 <-  as.character(steps$Ch1)
steps$Ch1 <- as.numeric(steps$Ch1)
steps$Ch2 <-  as.character(steps$Ch2)
steps$Ch2 <- as.numeric(steps$Ch2)
steps$Ch3 <-  as.character(steps$Ch3)
steps$Ch3 <- as.numeric(steps$Ch3)
steps$H2O2 <-  as.character(steps$H2O2)
steps$H2O2 <- as.numeric(steps$H2O2)
steps$slope <- as.character(steps$slope)
steps$slope <- as.numeric(steps$slope)
return(steps)
}
mySlope = function(dataframe, column){
data1<- dataframe
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-x#c(data1[Ch1in,column],data1[Ch2in,column],data1[Ch3in,column],data1[H2O2in,column])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
return(slope1)}
A1 <- cleanFile("1N5E_sept_1st.csv")
A2 <- cleanFile("1N5E_sept_2nd_A.csv")
library(foreign)
library(psych)
library(foreign)
cleanFile<- function(filename){
steps <- matrix(data = NA, nrow =6, ncol=7)
colnames(steps) <- c('name','AA','choline1','choline2','choline3','H2O2','slope')
data1 <-read.csv(filename, col.names = c("marker","sent1","enz1","sent2","enz2"))
data1 <- na.omit(data1)
data1<-data.frame(data1)
data1<-data1[-c(1:6),] #remove the first 6 rows, which are garbage
# data1[,2:5]<-data1[,2:5]*-1
# data1[,2:5]<-data1[,2:5]*1000
AAin <- which(data1$marker=="1")
Ch1in <- which(data1$marker=="2")
Ch2in <- which(data1$marker=="3")
Ch3in <- which(data1$marker=="4")
H2O2in <- which(data1$marker=="5")
H2O2done <- which(data1$marker=="6")
#   for(x in 2:5){
#     bsln <- median(data1[1:AAin,x])
#     data1[,x]<-data1[,x]-bsln
#   }
data1$electrode1 <- data1$enz1-data1$sent1
data1$electrode2 <- data1$enz2-data1$sent2
z=1
for(y in 2:7) {
#creates matrix with steps for each channel
name <- colnames(data1)[y]
AA <- data1[Ch1in,y]-data1[AAin,y]
Ch1 <- data1[Ch2in,y]-data1[Ch1in,y]
Ch2 <- data1[Ch3in,y]-data1[Ch2in,y]
Ch3 <- data1[H2O2in,y]-data1[Ch3in,y]
H2O2 <- data1[H2O2done,y]-data1[H2O2in,y]
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-c(data1[Ch1in,y],data1[Ch2in,y],data1[Ch3in,y],data1[H2O2in,y])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
steps[z,]<-c(name,AA,Ch1,Ch2,Ch3,H2O2,slope1)
#plots each channel
plot(data1[,y], type = "l", main = name)
z=z+1}
steps<-data.frame(steps)
steps$AA <-  as.character(steps$AA)
steps$AA <- as.numeric(steps$AA)
steps$Ch1 <-  as.character(steps$Ch1)
steps$Ch1 <- as.numeric(steps$Ch1)
steps$Ch2 <-  as.character(steps$Ch2)
steps$Ch2 <- as.numeric(steps$Ch2)
steps$Ch3 <-  as.character(steps$Ch3)
steps$Ch3 <- as.numeric(steps$Ch3)
steps$H2O2 <-  as.character(steps$H2O2)
steps$H2O2 <- as.numeric(steps$H2O2)
steps$slope <- as.character(steps$slope)
steps$slope <- as.numeric(steps$slope)
steps$selectivity <- (125 * steps$slope)/steps$AA
return(steps)
}
mySlope = function(dataframe, column){
data1<- dataframe
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-x#c(data1[Ch1in,column],data1[Ch2in,column],data1[Ch3in,column],data1[H2O2in,column])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
return(slope1)}
A1 <- cleanFile("1N5E_sept_1st.csv")
library(foreign)
library(psych)
library(foreign)
cleanFile<- function(filename){
steps <- matrix(data = NA, nrow =6, ncol=7)
colnames(steps) <- c('name','AA','choline1','choline2','choline3','H2O2','slope')
data1 <-read.csv(filename, col.names = c("marker","sent1","enz1","sent2","enz2"))
data1 <- na.omit(data1)
data1<-data.frame(data1)
data1<-data1[-c(1:6),] #remove the first 6 rows, which are garbage
# data1[,2:5]<-data1[,2:5]*-1
# data1[,2:5]<-data1[,2:5]*1000
AAin <- which(data1$marker=="1")
Ch1in <- which(data1$marker=="2")
Ch2in <- which(data1$marker=="3")
Ch3in <- which(data1$marker=="4")
H2O2in <- which(data1$marker=="5")
H2O2done <- which(data1$marker=="6")
#   for(x in 2:5){
#     bsln <- median(data1[1:AAin,x])
#     data1[,x]<-data1[,x]-bsln
#   }
data1$electrode1 <- data1$enz1-data1$sent1
data1$electrode2 <- data1$enz2-data1$sent2
z=1
for(y in 2:7) {
#creates matrix with steps for each channel
name <- colnames(data1)[y]
AA <- data1[Ch1in,y]-data1[AAin,y]
Ch1 <- data1[Ch2in,y]-data1[Ch1in,y]
Ch2 <- data1[Ch3in,y]-data1[Ch2in,y]
Ch3 <- data1[H2O2in,y]-data1[Ch3in,y]
H2O2 <- data1[H2O2done,y]-data1[H2O2in,y]
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-c(data1[Ch1in,y],data1[Ch2in,y],data1[Ch3in,y],data1[H2O2in,y])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
steps[z,]<-c(name,AA,Ch1,Ch2,Ch3,H2O2,slope1)
#plots each channel
plot(data1[,y], type = "l", main = name)
z=z+1}
steps<-data.frame(steps)
steps$AA <-  as.character(steps$AA)
steps$AA <- as.numeric(steps$AA)
steps$Ch1 <-  as.character(steps$Ch1)
steps$Ch1 <- as.numeric(steps$Ch1)
steps$Ch2 <-  as.character(steps$Ch2)
steps$Ch2 <- as.numeric(steps$Ch2)
steps$Ch3 <-  as.character(steps$Ch3)
steps$Ch3 <- as.numeric(steps$Ch3)
steps$H2O2 <-  as.character(steps$H2O2)
steps$H2O2 <- as.numeric(steps$H2O2)
steps$slope <- as.character(steps$slope)
steps$slope <- as.numeric(steps$slope)
steps$selectivity <- (125 * steps$slope)/steps$AA
return(steps)
}
mySlope = function(dataframe, column){
data1<- dataframe
slopeMat1 <- matrix(data=NA,nrow = 4,ncol = 2)
colnames(slopeMat1) <- c('uM','pA')
slopeMat1[,1]<-c(0,20,40,60)
slopeMat1[,2]<-x#c(data1[Ch1in,column],data1[Ch2in,column],data1[Ch3in,column],data1[H2O2in,column])
slopeMat1 <- data.frame(slopeMat1)
fit1 <- lm(pA ~ uM, data=slopeMat1)
slope1 <- fit1$coefficients[[2]]
return(slope1)}
A1 <- cleanFile("1N5E_sept_1st.csv")
